{"version":3,"sources":["components/ChatHeader/header.module.scss","components/Message/message.module.css","components/ChatInputArea/msginput.module.css","components/Chat/chat.module.css","reducers/connection.js","reducers/messages.js","reducers/settings.js","reducers/index.js","actionTypes/index.js","actions/messages.js","actions/settings.js","components/ChatHeader/ChatHeader.js","components/Message/Message.js","components/MessageList/MessageList.js","components/ChatInputArea/ChatInputArea.js","components/Chat/Chat.js","hooks/wshook.js","App.js","utils.js","actions/connection.js","hooks/inetcheck.js","index.js"],"names":["module","exports","initialState","internet","isOnline","ws","isOpened","messages","messagesPreparedForSending","settings","nickname","combineReducers","connection","state","action","type","filteredMessages","payload","filter","newMessage","findIndex","previousMessage","id","newMessages","concat","sort","a","b","slice","preparedMessageId","changeNickname","Indicator","styled","span","online","connect","websocketIsOpened","className","s","header","htmlFor","nickinput","value","onChange","event","target","required","indicator","From","currentUserNickname","sender","time","message","from","msgarea","timestamp","toLocaleString","DateTime","DATETIME_SHORT","MessageListWrapper","ScrollToBottom","attrs","map","key","fromMillis","Date","now","notSent","prepareMessageForSending","useState","currentMessage","setCurrentMessage","onCurrentMessageSend","trim","inputwrap","mesinput","placeholder","autoFocus","onKeyDown","onClick","chat","addEventListenersToWebsocket","websocket","eventListenerMap","Object","keys","forEach","addEventListener","removeEventListenersFromWebsocket","removeEventListener","receiveMessage","messageSent","wsserver","wscallbacks","useMemo","onMessage","msg","receivedMessages","JSON","parse","data","reverse","Notification","document","visibilityState","length","requestPermission","then","result","title","body","names","Set","el","join","notification","setTimeout","close","bind","restartInMs","callbacks","websocketRef","useRef","dispatchAction","useDispatch","useEffect","closeWebsocket","current","openWebsocket","WebSocket","restartWebsocket","onOpen","onClose","onError","open","e","code","error","wshook","useSelector","handleOnline","handleOffline","window","navigator","onLine","inetcheck","savedNickname","localStorage","getItem","setItem","stringify","send","Chat","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a658df53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2pPcS\",\"indicator\":\"header_indicator__764MB\",\"nickinput\":\"header_nickinput__2t0np\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"msgarea\":\"message_msgarea__T3Jdi\",\"timestamp\":\"message_timestamp__1p8xH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputwrap\":\"msginput_inputwrap__2CQzL\",\"mesinput\":\"msginput_mesinput__1VDTs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"chat_chat__2ietF\"};","import {\r\n  INTERNET_ONLINE,\r\n  INTERNET_OFFLINE,\r\n  WS_OPENED,\r\n  WS_CLOSED,\r\n} from '../actionTypes';\r\n\r\nconst initialState = {\r\n  internet: {\r\n    isOnline: true,\r\n  },\r\n  ws: {\r\n    isOpened: false,\r\n  },\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INTERNET_ONLINE:\r\n      return { ...state, internet: { ...state.internet, isOnline: true } };\r\n    case INTERNET_OFFLINE:\r\n      return { ...state, internet: { ...state.internet, isOnline: false } };\r\n    case WS_OPENED:\r\n      return {\r\n        ...state,\r\n        ws: { ...state.ws, isOpened: true },\r\n      };\r\n    case WS_CLOSED:\r\n      return {\r\n        ...state,\r\n        ws: { ...state.ws, isOpened: false },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  MESSAGES_RECEIVED,\r\n  PREPARE_MESSAGE_FOR_SENDING,\r\n  MESSAGE_SENT,\r\n} from '../actionTypes';\r\n\r\nconst initialState = {\r\n  messages: [],\r\n  messagesPreparedForSending: [],\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MESSAGES_RECEIVED:\r\n      const filteredMessages = action.payload.messages.filter(\r\n        newMessage =>\r\n          state.messages.findIndex(\r\n            previousMessage => previousMessage.id === newMessage.id\r\n          ) === -1\r\n      );\r\n\r\n      const newMessages = state.messages\r\n        .concat(filteredMessages)\r\n        .sort((a, b) => {\r\n          if (a < b) {\r\n            return -1;\r\n          } else if (a > b) {\r\n            return 1;\r\n          } else {\r\n            return 0;\r\n          }\r\n        });\r\n\r\n      return { ...state, messages: newMessages };\r\n    case PREPARE_MESSAGE_FOR_SENDING:\r\n      return {\r\n        ...state,\r\n        messagesPreparedForSending: [\r\n          ...state.messagesPreparedForSending,\r\n          action.payload,\r\n        ],\r\n      };\r\n    case MESSAGE_SENT:\r\n      return {\r\n        ...state,\r\n        messagesPreparedForSending: state.messagesPreparedForSending.slice(1),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { NICKNAME_CHANGED } from '../actionTypes';\r\n\r\nconst initialState = {\r\n  settings: {\r\n    nickname: '',\r\n  },\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case NICKNAME_CHANGED:\r\n      return {\r\n        ...state,\r\n        settings: { ...state.settings, nickname: action.payload.nickname },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport connection from './connection';\r\nimport messages from './messages';\r\nimport settings from './settings';\r\n\r\nexport default combineReducers({\r\n  connection,\r\n  messages,\r\n  settings,\r\n});\r\n","export const INTERNET_ONLINE = 'INTERNET_ONLINE';\r\nexport const INTERNET_OFFLINE = 'INTERNET_OFFLINE';\r\n\r\nexport const WS_CONNECTING = 'WS_CONNECTING';\r\nexport const WS_OPENED = 'WS_OPENED';\r\nexport const WS_CLOSED = 'WS_CLOSED';\r\n\r\nexport const PREPARE_MESSAGE_FOR_SENDING = 'PREPARE_MESSAGE_FOR_SENDING';\r\nexport const MESSAGES_RECEIVED = 'MESSAGE_RECEIVED';\r\nexport const MESSAGE_SENT = 'MESSAGE_SENT';\r\n\r\nexport const NICKNAME_CHANGED = 'NICKNAME_CHANGED';\r\n","import {\r\n  MESSAGES_RECEIVED,\r\n  PREPARE_MESSAGE_FOR_SENDING,\r\n  MESSAGE_SENT,\r\n} from '../actionTypes';\r\n\r\nlet preparedMessageId = 0;\r\n\r\nexport const receiveMessage = messages => ({\r\n  type: MESSAGES_RECEIVED,\r\n  payload: { messages },\r\n});\r\n\r\nexport const prepareMessageForSending = message => {\r\n  const id = preparedMessageId;\r\n  preparedMessageId++;\r\n\r\n  return {\r\n    type: PREPARE_MESSAGE_FOR_SENDING,\r\n    payload: { message, id },\r\n  };\r\n};\r\n\r\nexport const messageSent = () => ({\r\n  type: MESSAGE_SENT,\r\n});\r\n","import { NICKNAME_CHANGED } from '../actionTypes';\r\n\r\nexport const changeNickname = nickname => ({\r\n  type: NICKNAME_CHANGED,\r\n  payload: { nickname },\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { changeNickname } from '../../actions/settings';\r\nimport s from './header.module.scss';\r\n\r\nconst Indicator = styled.span`\r\n  ::before {\r\n    background-color: ${({ online }) => (online ? 'greenyellow' : 'darkred')};\r\n  }\r\n`;\r\n\r\nconst ChatHeader = ({ nickname, websocketIsOpened, changeNickname }) => (\r\n  <div className={s.header}>\r\n    <span>\r\n      <label htmlFor=\"nickinput\">Write your nickname here:</label>\r\n      <input\r\n        type=\"text\"\r\n        className={s.nickinput}\r\n        value={nickname}\r\n        id=\"nickinput\"\r\n        onChange={event => changeNickname(event.target.value)}\r\n        required\r\n      />\r\n    </span>\r\n    <Indicator className={s.indicator} online={websocketIsOpened}>\r\n      {websocketIsOpened ? 'ServerKeepsRunning' : 'Offline???...'}\r\n    </Indicator>\r\n  </div>\r\n);\r\n\r\nexport default connect(\r\n  state => ({\r\n    nickname: state.settings.settings.nickname,\r\n    websocketIsOpened: state.connection.ws.isOpened,\r\n  }),\r\n  { changeNickname }\r\n)(ChatHeader);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { DateTime } from 'luxon';\r\nimport s from './message.module.css';\r\n\r\nconst From = styled.span`\r\n  color: ${({ currentUserNickname, sender }) =>\r\n    currentUserNickname === sender\r\n      ? 'rgb(167, 115, 219)'\r\n      : 'rgb(185, 123, 94)'};\r\n`;\r\n\r\nconst Message = ({ time, message, from: sender, nickname }) => (\r\n  <div className={s.msgarea}>\r\n    <span className={s.timestamp}>{`[${time.toLocaleString(\r\n      DateTime.DATETIME_SHORT\r\n    )}]`}</span>\r\n    <From currentUserNickname={nickname} sender={sender}>{`${sender}:`}</From>\r\n    <span>{message}</span>\r\n  </div>\r\n);\r\n\r\nexport default connect(state => ({\r\n  nickname: state.settings.settings.nickname,\r\n}))(Message);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport Message from '../Message/Message';\r\nimport { DateTime } from 'luxon';\r\n\r\nconst MessageListWrapper = styled(ScrollToBottom).attrs(() => ({}))`\r\n  padding-left: 10px;\r\n  overflow-wrap: break-word;\r\n  overflow-y: auto;\r\n  border-top: 1px solid #cccccc;\r\n  }\r\n`;\r\n\r\nconst MessageList = ({ messages, messagesPreparedForSending, nickname }) => (\r\n  <MessageListWrapper>\r\n    {messages.map(({ id, time, message, from }) => (\r\n      <Message key={id} time={time} message={message} from={from} />\r\n    ))}\r\n    {messagesPreparedForSending.map(({ id, message }) => (\r\n      <Message\r\n        key={id}\r\n        time={DateTime.fromMillis(Date.now())}\r\n        message={message}\r\n        from={nickname}\r\n        notSent\r\n      />\r\n    ))}\r\n  </MessageListWrapper>\r\n);\r\n\r\nexport default connect(state => ({\r\n  messages: state.messages.messages,\r\n  messagesPreparedForSending: state.messages.messagesPreparedForSending,\r\n  nickname: state.settings.settings.nickname,\r\n}))(MessageList);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { prepareMessageForSending } from '../../actions/messages';\r\nimport s from './msginput.module.css';\r\n\r\nconst ChatInputArea = ({ nickname, prepareMessageForSending }) => {\r\n  const [currentMessage, setCurrentMessage] = useState('');\r\n  const onCurrentMessageSend = () => {\r\n    if (currentMessage.trim()) {\r\n      prepareMessageForSending(currentMessage);\r\n      setCurrentMessage('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.inputwrap}>\r\n      <input\r\n        className={s.mesinput}\r\n        placeholder=\"Write your message here(after filling a nickname)\"\r\n        autoFocus\r\n        value={currentMessage}\r\n        onChange={event => setCurrentMessage(event.target.value)}\r\n        onKeyDown={event => {\r\n          if (event.key === 'Enter') {\r\n            onCurrentMessageSend();\r\n          }\r\n        }}\r\n      />\r\n      <button onClick={onCurrentMessageSend}>send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  state => ({\r\n    nickname: state.settings.settings.nickname,\r\n  }),\r\n  { prepareMessageForSending }\r\n)(ChatInputArea);\r\n","import React from 'react';\r\nimport ChatHeader from '../ChatHeader/ChatHeader';\r\nimport MessageList from '../MessageList/MessageList';\r\nimport ChatInputArea from '../ChatInputArea/ChatInputArea';\r\nimport s from './chat.module.css';\r\n\r\nexport default () => (\r\n  <div className={s.chat}>\r\n    <ChatHeader />\r\n    <MessageList />\r\n    <ChatInputArea />\r\n  </div>\r\n);\r\n","import { useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { wsOpened, wsClosed } from '../actions/connection';\r\n\r\nconst addEventListenersToWebsocket = (websocket, eventListenerMap) => {\r\n  Object.keys(eventListenerMap).forEach(key => {\r\n    if (eventListenerMap[key]) {\r\n      websocket.addEventListener(key, eventListenerMap[key]);\r\n    }\r\n  });\r\n};\r\n\r\nconst removeEventListenersFromWebsocket = (websocket, eventListenerMap) => {\r\n  Object.keys(eventListenerMap).forEach(key => {\r\n    if (eventListenerMap[key]) {\r\n      websocket.removeEventListener(key, eventListenerMap[key]);\r\n    }\r\n  });\r\n};\r\n\r\nexport default ({ isOnline, wsserver, restartInMs = 2000, callbacks = {} }) => {\r\n  const websocketRef = useRef(null);\r\n  const dispatchAction = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const closeWebsocket = () => {\r\n      if (websocketRef.current) {\r\n        websocketRef.current.close();\r\n      }\r\n      dispatchAction(wsClosed());\r\n    };\r\n\r\n    const openWebsocket = () => {\r\n      websocketRef.current = new WebSocket(wsserver);\r\n    };\r\n\r\n    const restartWebsocket = () => {\r\n      removeEventListenersFromWebsocket(websocketRef.current, eventListenerMap);\r\n      closeWebsocket();\r\n      openWebsocket();\r\n      addEventListenersToWebsocket(websocketRef.current, eventListenerMap);\r\n    };\r\n\r\n    const { onOpen, onClose, onMessage, onError } = callbacks;\r\n    const eventListenerMap = {\r\n      open: e => {\r\n        dispatchAction(wsOpened());\r\n        if (onOpen) {\r\n          onOpen(e);\r\n        }\r\n      },\r\n      close: e => {\r\n        if (onClose) {\r\n          onClose(e);\r\n        }\r\n\r\n        if (e.code !== 1000) {\r\n          setTimeout(restartWebsocket, restartInMs);\r\n        }\r\n      },\r\n      message: onMessage,\r\n      error: e => {\r\n        if (onError) {\r\n          onError(e);\r\n        }\r\n        setTimeout(restartWebsocket, restartInMs);\r\n      },\r\n    };\r\n\r\n    if (isOnline) {\r\n      openWebsocket();\r\n      addEventListenersToWebsocket(websocketRef.current, eventListenerMap);\r\n    } else {\r\n      setTimeout(restartWebsocket, restartInMs);\r\n    }\r\n\r\n    return () => {\r\n      closeWebsocket(1000);\r\n      removeEventListenersFromWebsocket(websocketRef.current, eventListenerMap);\r\n    };\r\n  }, [wsserver, callbacks, dispatchAction, isOnline, restartInMs]);\r\n\r\n  return websocketRef.current;\r\n};\r\n","import React, { useMemo, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { receiveMessage, messageSent } from './actions/messages';\r\nimport { changeNickname } from './actions/settings';\r\nimport { DateTime } from 'luxon';\r\nimport Chat from './components/Chat/Chat';\r\nimport inetcheck from './hooks/inetcheck';\r\nimport wshook from './hooks/wshook';\r\nimport { sendNotification } from './utils';\r\n\r\nconst App = ({\r\n  wsserver,\r\n  nickname,\r\n  changeNickname,\r\n  websocketIsOpened,\r\n  receiveMessage,\r\n  messagesPreparedForSending,\r\n  messageSent,\r\n}) => {\r\n  const wscallbacks = useMemo(\r\n    () => ({\r\n      onMessage: msg => {\r\n        const receivedMessages = JSON.parse(msg.data)\r\n          .reverse()\r\n          .map(msg => {\r\n            return { ...msg, time: DateTime.fromMillis(msg.time) };\r\n          });\r\n        receiveMessage(receivedMessages);\r\n        sendNotification(receivedMessages);\r\n      },\r\n    }),\r\n    [receiveMessage]\r\n  );\r\n\r\n  const { isOnline } = inetcheck();\r\n  const ws = wshook({\r\n    isOnline,\r\n    wsserver,\r\n    callbacks: wscallbacks,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const savedNickname = localStorage.getItem('nickname');\r\n    if (savedNickname) {\r\n      changeNickname(JSON.parse(savedNickname));\r\n    }\r\n  }, [changeNickname]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('nickname', JSON.stringify(nickname));\r\n  }, [nickname]);\r\n\r\n  useEffect(() => {\r\n    if (websocketIsOpened && messagesPreparedForSending.length) {\r\n      ws.send(\r\n        JSON.stringify({\r\n          from: nickname,\r\n          message: messagesPreparedForSending[0].message,\r\n        })\r\n      );\r\n      messageSent();\r\n    }\r\n  }, [\r\n    ws,\r\n    nickname,\r\n    messageSent,\r\n    websocketIsOpened,\r\n    messagesPreparedForSending,\r\n  ]);\r\n\r\n  return <Chat />;\r\n};\r\n\r\nexport default connect(\r\n  state => ({\r\n    nickname: state.settings.settings.nickname,\r\n    websocketIsOpened: state.connection.ws.isOpened,\r\n    messagesPreparedForSending: state.messages.messagesPreparedForSending,\r\n  }),\r\n  { receiveMessage, messageSent, changeNickname }\r\n)(App);\r\n","export const sendNotification = messages => {\r\n  if (\r\n    typeof Notification !== 'undefined' &&\r\n    document.visibilityState !== 'visible' &&\r\n    messages.length\r\n  ) {\r\n    Notification.requestPermission().then(result => {\r\n      if (result === 'granted') {\r\n        let title;\r\n        let body;\r\n\r\n        if (messages.length > 1) {\r\n          const names = [...new Set(messages.map(el => el.from))];\r\n\r\n          title = `You've got ${messages.length} new messages`;\r\n          body = `From ${names.slice(0, 3).join(', ')}${\r\n            names.length > 3 ? ' and others.' : '.'\r\n          }`;\r\n        } else {\r\n          title = `You've got a message from ${messages[0].from}`;\r\n          body = `${messages[0].message}`;\r\n        }\r\n\r\n        const notification = new Notification(title, { body });\r\n        setTimeout(notification.close.bind(notification), 4000);\r\n      }\r\n    });\r\n  }\r\n};\r\n","import {\r\n  INTERNET_ONLINE,\r\n  INTERNET_OFFLINE,\r\n  WS_OPENED,\r\n  WS_CLOSED,\r\n} from '../actionTypes';\r\n\r\nexport const internetOnline = () => ({\r\n  type: INTERNET_ONLINE,\r\n});\r\nexport const internetOffline = () => ({\r\n  type: INTERNET_OFFLINE,\r\n});\r\nexport const wsOpened = () => ({\r\n  type: WS_OPENED,\r\n});\r\nexport const wsClosed = () => ({\r\n  type: WS_CLOSED,\r\n});\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { internetOnline, internetOffline } from '../actions/connection';\r\n\r\nexport default () => {\r\n  const dispatchAction = useDispatch();\r\n  const isOnline = useSelector(state => state.connection.internet.isOnline);\r\n\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      dispatchAction(internetOnline());\r\n    };\r\n    const handleOffline = () => {\r\n      dispatchAction(internetOffline());\r\n    };\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, [dispatchAction]);\r\n\r\n  useEffect(() => {\r\n    if (window.navigator.onLine && !isOnline) {\r\n      dispatchAction(internetOnline());\r\n    } else if (!window.navigator.onLine && isOnline) {\r\n      dispatchAction(internetOffline());\r\n    }\r\n  }, [dispatchAction, isOnline]);\r\n\r\n  return {\r\n    isOnline,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App wsserver=\"ws://st-chat.shas.tel\" />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}